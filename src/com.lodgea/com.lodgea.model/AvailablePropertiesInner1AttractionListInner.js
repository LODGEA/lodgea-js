/**
 * lodgea-js
 * LODGEA SDK for javascript. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailablePropertiesInner1AttractionListInnerDistance from './AvailablePropertiesInner1AttractionListInnerDistance';

/**
 * The AvailablePropertiesInner1AttractionListInner model module.
 * @module com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInner
 * @version 1.1.0
 */
class AvailablePropertiesInner1AttractionListInner {
    /**
     * Constructs a new <code>AvailablePropertiesInner1AttractionListInner</code>.
     * @alias module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInner
     * @param typeCode {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInner.TypeCodeEnum} The code for this attraction type.<p>See also <a href=\"#attractioncategory-codes\">in the appendix</a>.</p>
     * @param name {String} The name of the attraction. Names are proper nouns and therefore not affected by the given language code.
     * @param distance {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInnerDistance} 
     */
    constructor(typeCode, name, distance) { 
        
        AvailablePropertiesInner1AttractionListInner.initialize(this, typeCode, name, distance);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, typeCode, name, distance) { 
        obj['typeCode'] = typeCode;
        obj['name'] = name;
        obj['distance'] = distance;
    }

    /**
     * Constructs a <code>AvailablePropertiesInner1AttractionListInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInner} obj Optional instance to populate.
     * @return {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInner} The populated <code>AvailablePropertiesInner1AttractionListInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailablePropertiesInner1AttractionListInner();

            if (data.hasOwnProperty('typeCode')) {
                obj['typeCode'] = ApiClient.convertToType(data['typeCode'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = AvailablePropertiesInner1AttractionListInnerDistance.constructFromObject(data['distance']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailablePropertiesInner1AttractionListInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailablePropertiesInner1AttractionListInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailablePropertiesInner1AttractionListInner.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `distance`
        if (data['distance']) { // data not null
          AvailablePropertiesInner1AttractionListInnerDistance.validateJSON(data['distance']);
        }

        return true;
    }


}

AvailablePropertiesInner1AttractionListInner.RequiredProperties = ["typeCode", "name", "distance"];

/**
 * The code for this attraction type.<p>See also <a href=\"#attractioncategory-codes\">in the appendix</a>.</p>
 * @member {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInner.TypeCodeEnum} typeCode
 */
AvailablePropertiesInner1AttractionListInner.prototype['typeCode'] = undefined;

/**
 * The name of the attraction. Names are proper nouns and therefore not affected by the given language code.
 * @member {String} name
 */
AvailablePropertiesInner1AttractionListInner.prototype['name'] = undefined;

/**
 * @member {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1AttractionListInnerDistance} distance
 */
AvailablePropertiesInner1AttractionListInner.prototype['distance'] = undefined;





/**
 * Allowed values for the <code>typeCode</code> property.
 * @enum {Number}
 * @readonly
 */
AvailablePropertiesInner1AttractionListInner['TypeCodeEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8,

    /**
     * value: 9
     * @const
     */
    "9": 9,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 11
     * @const
     */
    "11": 11,

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 13
     * @const
     */
    "13": 13,

    /**
     * value: 14
     * @const
     */
    "14": 14,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 16
     * @const
     */
    "16": 16,

    /**
     * value: 17
     * @const
     */
    "17": 17,

    /**
     * value: 18
     * @const
     */
    "18": 18,

    /**
     * value: 19
     * @const
     */
    "19": 19,

    /**
     * value: 20
     * @const
     */
    "20": 20,

    /**
     * value: 21
     * @const
     */
    "21": 21,

    /**
     * value: 22
     * @const
     */
    "22": 22,

    /**
     * value: 23
     * @const
     */
    "23": 23,

    /**
     * value: 24
     * @const
     */
    "24": 24,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 26
     * @const
     */
    "26": 26,

    /**
     * value: 27
     * @const
     */
    "27": 27,

    /**
     * value: 28
     * @const
     */
    "28": 28,

    /**
     * value: 29
     * @const
     */
    "29": 29,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 31
     * @const
     */
    "31": 31,

    /**
     * value: 32
     * @const
     */
    "32": 32,

    /**
     * value: 33
     * @const
     */
    "33": 33,

    /**
     * value: 34
     * @const
     */
    "34": 34,

    /**
     * value: 35
     * @const
     */
    "35": 35,

    /**
     * value: 36
     * @const
     */
    "36": 36,

    /**
     * value: 37
     * @const
     */
    "37": 37,

    /**
     * value: 38
     * @const
     */
    "38": 38,

    /**
     * value: 39
     * @const
     */
    "39": 39,

    /**
     * value: 40
     * @const
     */
    "40": 40,

    /**
     * value: 41
     * @const
     */
    "41": 41,

    /**
     * value: 42
     * @const
     */
    "42": 42,

    /**
     * value: 43
     * @const
     */
    "43": 43,

    /**
     * value: 44
     * @const
     */
    "44": 44,

    /**
     * value: 45
     * @const
     */
    "45": 45,

    /**
     * value: 46
     * @const
     */
    "46": 46,

    /**
     * value: 47
     * @const
     */
    "47": 47,

    /**
     * value: 48
     * @const
     */
    "48": 48,

    /**
     * value: 49
     * @const
     */
    "49": 49,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 51
     * @const
     */
    "51": 51,

    /**
     * value: 52
     * @const
     */
    "52": 52,

    /**
     * value: 53
     * @const
     */
    "53": 53,

    /**
     * value: 54
     * @const
     */
    "54": 54,

    /**
     * value: 55
     * @const
     */
    "55": 55,

    /**
     * value: 56
     * @const
     */
    "56": 56,

    /**
     * value: 57
     * @const
     */
    "57": 57,

    /**
     * value: 58
     * @const
     */
    "58": 58,

    /**
     * value: 59
     * @const
     */
    "59": 59,

    /**
     * value: 60
     * @const
     */
    "60": 60,

    /**
     * value: 61
     * @const
     */
    "61": 61,

    /**
     * value: 62
     * @const
     */
    "62": 62,

    /**
     * value: 63
     * @const
     */
    "63": 63,

    /**
     * value: 64
     * @const
     */
    "64": 64,

    /**
     * value: 65
     * @const
     */
    "65": 65,

    /**
     * value: 66
     * @const
     */
    "66": 66,

    /**
     * value: 67
     * @const
     */
    "67": 67,

    /**
     * value: 68
     * @const
     */
    "68": 68,

    /**
     * value: 69
     * @const
     */
    "69": 69,

    /**
     * value: 70
     * @const
     */
    "70": 70,

    /**
     * value: 71
     * @const
     */
    "71": 71,

    /**
     * value: 72
     * @const
     */
    "72": 72,

    /**
     * value: 73
     * @const
     */
    "73": 73,

    /**
     * value: 74
     * @const
     */
    "74": 74,

    /**
     * value: 75
     * @const
     */
    "75": 75,

    /**
     * value: 76
     * @const
     */
    "76": 76,

    /**
     * value: 77
     * @const
     */
    "77": 77,

    /**
     * value: 78
     * @const
     */
    "78": 78,

    /**
     * value: 79
     * @const
     */
    "79": 79,

    /**
     * value: 80
     * @const
     */
    "80": 80,

    /**
     * value: 81
     * @const
     */
    "81": 81,

    /**
     * value: 82
     * @const
     */
    "82": 82,

    /**
     * value: 83
     * @const
     */
    "83": 83,

    /**
     * value: 84
     * @const
     */
    "84": 84,

    /**
     * value: 85
     * @const
     */
    "85": 85,

    /**
     * value: 86
     * @const
     */
    "86": 86,

    /**
     * value: 87
     * @const
     */
    "87": 87,

    /**
     * value: 88
     * @const
     */
    "88": 88,

    /**
     * value: 89
     * @const
     */
    "89": 89,

    /**
     * value: 90
     * @const
     */
    "90": 90,

    /**
     * value: 91
     * @const
     */
    "91": 91,

    /**
     * value: 92
     * @const
     */
    "92": 92,

    /**
     * value: 93
     * @const
     */
    "93": 93,

    /**
     * value: 94
     * @const
     */
    "94": 94,

    /**
     * value: 95
     * @const
     */
    "95": 95,

    /**
     * value: 96
     * @const
     */
    "96": 96,

    /**
     * value: 97
     * @const
     */
    "97": 97,

    /**
     * value: 98
     * @const
     */
    "98": 98,

    /**
     * value: 99
     * @const
     */
    "99": 99,

    /**
     * value: 100
     * @const
     */
    "100": 100,

    /**
     * value: 101
     * @const
     */
    "101": 101,

    /**
     * value: 102
     * @const
     */
    "102": 102,

    /**
     * value: 103
     * @const
     */
    "103": 103,

    /**
     * value: 104
     * @const
     */
    "104": 104,

    /**
     * value: 105
     * @const
     */
    "105": 105,

    /**
     * value: 106
     * @const
     */
    "106": 106,

    /**
     * value: 107
     * @const
     */
    "107": 107,

    /**
     * value: 108
     * @const
     */
    "108": 108,

    /**
     * value: 109
     * @const
     */
    "109": 109,

    /**
     * value: 110
     * @const
     */
    "110": 110,

    /**
     * value: 90001
     * @const
     */
    "90001": 90001,

    /**
     * value: 90002
     * @const
     */
    "90002": 90002,

    /**
     * value: 90003
     * @const
     */
    "90003": 90003,

    /**
     * value: 90004
     * @const
     */
    "90004": 90004,

    /**
     * value: 90005
     * @const
     */
    "90005": 90005,

    /**
     * value: 90006
     * @const
     */
    "90006": 90006,

    /**
     * value: 90007
     * @const
     */
    "90007": 90007,

    /**
     * value: 90008
     * @const
     */
    "90008": 90008,

    /**
     * value: 90009
     * @const
     */
    "90009": 90009,

    /**
     * value: 90010
     * @const
     */
    "90010": 90010
};



export default AvailablePropertiesInner1AttractionListInner;

