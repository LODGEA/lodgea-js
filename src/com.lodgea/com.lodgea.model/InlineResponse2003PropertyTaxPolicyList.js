/**
 * lodgea-js
 * LODGEA SDK for javascript. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineResponse2003PropertyTaxPolicyList model module.
 * @module com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList
 * @version 1.2.0
 */
class InlineResponse2003PropertyTaxPolicyList {
    /**
     * Constructs a new <code>InlineResponse2003PropertyTaxPolicyList</code>.
     * @alias module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList
     * @param typeCode {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.TypeCodeEnum} The code that represents the type of tax.<p>See also <a href=\"#taxtype-codes\">in the appendix</a>.</p>
     * @param chargeType {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.ChargeTypeEnum} The type of charge.
     * @param chargeFrequencyCode {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.ChargeFrequencyCodeEnum} The code that represents the frequency of charge.<p>See also <a href=\"#chargetype-codes\">in the appendix</a>.</p>
     * @param currencyCode {String} The currency code of the currency in that the charge is applied.<p>See also <a href=\"#currencycodes\">in the appendix</a>.</p>
     * @param conditionList {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.ConditionListEnum>} A list of conditions for the tax. Is empty if <code>chargeType</code> is not <code>conditional</code>.
     */
    constructor(typeCode, chargeType, chargeFrequencyCode, currencyCode, conditionList) { 
        
        InlineResponse2003PropertyTaxPolicyList.initialize(this, typeCode, chargeType, chargeFrequencyCode, currencyCode, conditionList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, typeCode, chargeType, chargeFrequencyCode, currencyCode, conditionList) { 
        obj['typeCode'] = typeCode;
        obj['chargeType'] = chargeType;
        obj['chargeFrequencyCode'] = chargeFrequencyCode;
        obj['currencyCode'] = currencyCode;
        obj['conditionList'] = conditionList;
    }

    /**
     * Constructs a <code>InlineResponse2003PropertyTaxPolicyList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList} obj Optional instance to populate.
     * @return {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList} The populated <code>InlineResponse2003PropertyTaxPolicyList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2003PropertyTaxPolicyList();

            if (data.hasOwnProperty('typeCode')) {
                obj['typeCode'] = ApiClient.convertToType(data['typeCode'], 'Number');
            }
            if (data.hasOwnProperty('percent')) {
                obj['percent'] = ApiClient.convertToType(data['percent'], 'Number');
            }
            if (data.hasOwnProperty('chargeType')) {
                obj['chargeType'] = ApiClient.convertToType(data['chargeType'], 'String');
            }
            if (data.hasOwnProperty('chargeFrequencyCode')) {
                obj['chargeFrequencyCode'] = ApiClient.convertToType(data['chargeFrequencyCode'], 'Number');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('conditionList')) {
                obj['conditionList'] = ApiClient.convertToType(data['conditionList'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * The code that represents the type of tax.<p>See also <a href=\"#taxtype-codes\">in the appendix</a>.</p>
 * @member {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.TypeCodeEnum} typeCode
 */
InlineResponse2003PropertyTaxPolicyList.prototype['typeCode'] = undefined;

/**
 * The charged percentage if applicable.
 * @member {Number} percent
 */
InlineResponse2003PropertyTaxPolicyList.prototype['percent'] = undefined;

/**
 * The type of charge.
 * @member {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.ChargeTypeEnum} chargeType
 */
InlineResponse2003PropertyTaxPolicyList.prototype['chargeType'] = undefined;

/**
 * The code that represents the frequency of charge.<p>See also <a href=\"#chargetype-codes\">in the appendix</a>.</p>
 * @member {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.ChargeFrequencyCodeEnum} chargeFrequencyCode
 */
InlineResponse2003PropertyTaxPolicyList.prototype['chargeFrequencyCode'] = undefined;

/**
 * The currency code of the currency in that the charge is applied.<p>See also <a href=\"#currencycodes\">in the appendix</a>.</p>
 * @member {String} currencyCode
 */
InlineResponse2003PropertyTaxPolicyList.prototype['currencyCode'] = undefined;

/**
 * A list of conditions for the tax. Is empty if <code>chargeType</code> is not <code>conditional</code>.
 * @member {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyTaxPolicyList.ConditionListEnum>} conditionList
 */
InlineResponse2003PropertyTaxPolicyList.prototype['conditionList'] = undefined;





/**
 * Allowed values for the <code>typeCode</code> property.
 * @enum {Number}
 * @readonly
 */
InlineResponse2003PropertyTaxPolicyList['TypeCodeEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 13
     * @const
     */
    "13": 13,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 17
     * @const
     */
    "17": 17,

    /**
     * value: 18
     * @const
     */
    "18": 18,

    /**
     * value: 19
     * @const
     */
    "19": 19,

    /**
     * value: 28
     * @const
     */
    "28": 28,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 35
     * @const
     */
    "35": 35,

    /**
     * value: 36
     * @const
     */
    "36": 36,

    /**
     * value: 39
     * @const
     */
    "39": 39,

    /**
     * value: 43
     * @const
     */
    "43": 43,

    /**
     * value: 46
     * @const
     */
    "46": 46,

    /**
     * value: 5001
     * @const
     */
    "5001": 5001,

    /**
     * value: 5002
     * @const
     */
    "5002": 5002,

    /**
     * value: 5004
     * @const
     */
    "5004": 5004,

    /**
     * value: 5007
     * @const
     */
    "5007": 5007,

    /**
     * value: 5008
     * @const
     */
    "5008": 5008
};


/**
 * Allowed values for the <code>chargeType</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse2003PropertyTaxPolicyList['ChargeTypeEnum'] = {

    /**
     * value: "included"
     * @const
     */
    "included": "included",

    /**
     * value: "excluded"
     * @const
     */
    "excluded": "excluded",

    /**
     * value: "conditional"
     * @const
     */
    "conditional": "conditional"
};


/**
 * Allowed values for the <code>chargeFrequencyCode</code> property.
 * @enum {Number}
 * @readonly
 */
InlineResponse2003PropertyTaxPolicyList['ChargeFrequencyCodeEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 17
     * @const
     */
    "17": 17,

    /**
     * value: 19
     * @const
     */
    "19": 19,

    /**
     * value: 20
     * @const
     */
    "20": 20,

    /**
     * value: 21
     * @const
     */
    "21": 21,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 31
     * @const
     */
    "31": 31,

    /**
     * value: 5000
     * @const
     */
    "5000": 5000,

    /**
     * value: 5001
     * @const
     */
    "5001": 5001,

    /**
     * value: 5002
     * @const
     */
    "5002": 5002,

    /**
     * value: 5010
     * @const
     */
    "5010": 5010,

    /**
     * value: 5011
     * @const
     */
    "5011": 5011,

    /**
     * value: 5012
     * @const
     */
    "5012": 5012,

    /**
     * value: 5013
     * @const
     */
    "5013": 5013,

    /**
     * value: 5014
     * @const
     */
    "5014": 5014,

    /**
     * value: 5015
     * @const
     */
    "5015": 5015,

    /**
     * value: 5016
     * @const
     */
    "5016": 5016,

    /**
     * value: 5017
     * @const
     */
    "5017": 5017,

    /**
     * value: 90010
     * @const
     */
    "90010": 90010,

    /**
     * value: 90011
     * @const
     */
    "90011": 90011,

    /**
     * value: 90012
     * @const
     */
    "90012": 90012,

    /**
     * value: 90013
     * @const
     */
    "90013": 90013
};


/**
 * Allowed values for the <code>conditionList</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse2003PropertyTaxPolicyList['ConditionListEnum'] = {

    /**
     * value: "guest_brings_pet"
     * @const
     */
    "brings_pet": "guest_brings_pet",

    /**
     * value: "guest_doesnt_clean_before_checkout"
     * @const
     */
    "doesnt_clean_before_checkout": "guest_doesnt_clean_before_checkout",

    /**
     * value: "guest_smokes"
     * @const
     */
    "smokes": "guest_smokes"
};



export default InlineResponse2003PropertyTaxPolicyList;

