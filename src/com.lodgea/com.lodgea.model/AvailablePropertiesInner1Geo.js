/**
 * lodgea-js
 * LODGEA SDK for javascript. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailablePropertiesInner1GeoLocation from './AvailablePropertiesInner1GeoLocation';

/**
 * The AvailablePropertiesInner1Geo model module.
 * @module com.lodgea/com.lodgea.model/AvailablePropertiesInner1Geo
 * @version 1.1.0
 */
class AvailablePropertiesInner1Geo {
    /**
     * Constructs a new <code>AvailablePropertiesInner1Geo</code>.
     * A geographical information set describing the location of this property.&lt;br&gt;&lt;br&gt;See also &lt;a href&#x3D;\&quot;#locationtypes\&quot;&gt;in the appendix&lt;/a&gt;.
     * @alias module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1Geo
     * @param language {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1Geo.LanguageEnum} The language of the localizable fields ot this geographical information set.<p>Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.</p><p>See also <a href=\"#isolanguage-codes\">in the appendix</a>.</p>
     * @param formattedAddress {String} The formatted address in the local format of the properties location.
     * @param location {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1GeoLocation} 
     * @param placeId {String} Uniquely identifies a place in our database.
     */
    constructor(language, formattedAddress, location, placeId) { 
        
        AvailablePropertiesInner1Geo.initialize(this, language, formattedAddress, location, placeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, language, formattedAddress, location, placeId) { 
        obj['language'] = language;
        obj['formatted_address'] = formattedAddress;
        obj['location'] = location;
        obj['place_id'] = placeId;
    }

    /**
     * Constructs a <code>AvailablePropertiesInner1Geo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1Geo} obj Optional instance to populate.
     * @return {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1Geo} The populated <code>AvailablePropertiesInner1Geo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailablePropertiesInner1Geo();

            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('formatted_address')) {
                obj['formatted_address'] = ApiClient.convertToType(data['formatted_address'], 'String');
            }
            if (data.hasOwnProperty('route')) {
                obj['route'] = ApiClient.convertToType(data['route'], 'String');
            }
            if (data.hasOwnProperty('street_number')) {
                obj['street_number'] = ApiClient.convertToType(data['street_number'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('locality')) {
                obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
            }
            if (data.hasOwnProperty('sublocality')) {
                obj['sublocality'] = ApiClient.convertToType(data['sublocality'], 'String');
            }
            if (data.hasOwnProperty('sublocality_level_1')) {
                obj['sublocality_level_1'] = ApiClient.convertToType(data['sublocality_level_1'], 'String');
            }
            if (data.hasOwnProperty('sublocality_level_2')) {
                obj['sublocality_level_2'] = ApiClient.convertToType(data['sublocality_level_2'], 'String');
            }
            if (data.hasOwnProperty('sublocality_level_3')) {
                obj['sublocality_level_3'] = ApiClient.convertToType(data['sublocality_level_3'], 'String');
            }
            if (data.hasOwnProperty('sublocality_level_4')) {
                obj['sublocality_level_4'] = ApiClient.convertToType(data['sublocality_level_4'], 'String');
            }
            if (data.hasOwnProperty('sublocality_level_5')) {
                obj['sublocality_level_5'] = ApiClient.convertToType(data['sublocality_level_5'], 'String');
            }
            if (data.hasOwnProperty('administrative_area_level_1')) {
                obj['administrative_area_level_1'] = ApiClient.convertToType(data['administrative_area_level_1'], 'String');
            }
            if (data.hasOwnProperty('administrative_area_level_2')) {
                obj['administrative_area_level_2'] = ApiClient.convertToType(data['administrative_area_level_2'], 'String');
            }
            if (data.hasOwnProperty('administrative_area_level_3')) {
                obj['administrative_area_level_3'] = ApiClient.convertToType(data['administrative_area_level_3'], 'String');
            }
            if (data.hasOwnProperty('administrative_area_level_4')) {
                obj['administrative_area_level_4'] = ApiClient.convertToType(data['administrative_area_level_4'], 'String');
            }
            if (data.hasOwnProperty('administrative_area_level_5')) {
                obj['administrative_area_level_5'] = ApiClient.convertToType(data['administrative_area_level_5'], 'String');
            }
            if (data.hasOwnProperty('state_code')) {
                obj['state_code'] = ApiClient.convertToType(data['state_code'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = AvailablePropertiesInner1GeoLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('place_id')) {
                obj['place_id'] = ApiClient.convertToType(data['place_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailablePropertiesInner1Geo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailablePropertiesInner1Geo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailablePropertiesInner1Geo.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['formatted_address'] && !(typeof data['formatted_address'] === 'string' || data['formatted_address'] instanceof String)) {
            throw new Error("Expected the field `formatted_address` to be a primitive type in the JSON string but got " + data['formatted_address']);
        }
        // ensure the json data is a string
        if (data['route'] && !(typeof data['route'] === 'string' || data['route'] instanceof String)) {
            throw new Error("Expected the field `route` to be a primitive type in the JSON string but got " + data['route']);
        }
        // ensure the json data is a string
        if (data['street_number'] && !(typeof data['street_number'] === 'string' || data['street_number'] instanceof String)) {
            throw new Error("Expected the field `street_number` to be a primitive type in the JSON string but got " + data['street_number']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
            throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
        }
        // ensure the json data is a string
        if (data['sublocality'] && !(typeof data['sublocality'] === 'string' || data['sublocality'] instanceof String)) {
            throw new Error("Expected the field `sublocality` to be a primitive type in the JSON string but got " + data['sublocality']);
        }
        // ensure the json data is a string
        if (data['sublocality_level_1'] && !(typeof data['sublocality_level_1'] === 'string' || data['sublocality_level_1'] instanceof String)) {
            throw new Error("Expected the field `sublocality_level_1` to be a primitive type in the JSON string but got " + data['sublocality_level_1']);
        }
        // ensure the json data is a string
        if (data['sublocality_level_2'] && !(typeof data['sublocality_level_2'] === 'string' || data['sublocality_level_2'] instanceof String)) {
            throw new Error("Expected the field `sublocality_level_2` to be a primitive type in the JSON string but got " + data['sublocality_level_2']);
        }
        // ensure the json data is a string
        if (data['sublocality_level_3'] && !(typeof data['sublocality_level_3'] === 'string' || data['sublocality_level_3'] instanceof String)) {
            throw new Error("Expected the field `sublocality_level_3` to be a primitive type in the JSON string but got " + data['sublocality_level_3']);
        }
        // ensure the json data is a string
        if (data['sublocality_level_4'] && !(typeof data['sublocality_level_4'] === 'string' || data['sublocality_level_4'] instanceof String)) {
            throw new Error("Expected the field `sublocality_level_4` to be a primitive type in the JSON string but got " + data['sublocality_level_4']);
        }
        // ensure the json data is a string
        if (data['sublocality_level_5'] && !(typeof data['sublocality_level_5'] === 'string' || data['sublocality_level_5'] instanceof String)) {
            throw new Error("Expected the field `sublocality_level_5` to be a primitive type in the JSON string but got " + data['sublocality_level_5']);
        }
        // ensure the json data is a string
        if (data['administrative_area_level_1'] && !(typeof data['administrative_area_level_1'] === 'string' || data['administrative_area_level_1'] instanceof String)) {
            throw new Error("Expected the field `administrative_area_level_1` to be a primitive type in the JSON string but got " + data['administrative_area_level_1']);
        }
        // ensure the json data is a string
        if (data['administrative_area_level_2'] && !(typeof data['administrative_area_level_2'] === 'string' || data['administrative_area_level_2'] instanceof String)) {
            throw new Error("Expected the field `administrative_area_level_2` to be a primitive type in the JSON string but got " + data['administrative_area_level_2']);
        }
        // ensure the json data is a string
        if (data['administrative_area_level_3'] && !(typeof data['administrative_area_level_3'] === 'string' || data['administrative_area_level_3'] instanceof String)) {
            throw new Error("Expected the field `administrative_area_level_3` to be a primitive type in the JSON string but got " + data['administrative_area_level_3']);
        }
        // ensure the json data is a string
        if (data['administrative_area_level_4'] && !(typeof data['administrative_area_level_4'] === 'string' || data['administrative_area_level_4'] instanceof String)) {
            throw new Error("Expected the field `administrative_area_level_4` to be a primitive type in the JSON string but got " + data['administrative_area_level_4']);
        }
        // ensure the json data is a string
        if (data['administrative_area_level_5'] && !(typeof data['administrative_area_level_5'] === 'string' || data['administrative_area_level_5'] instanceof String)) {
            throw new Error("Expected the field `administrative_area_level_5` to be a primitive type in the JSON string but got " + data['administrative_area_level_5']);
        }
        // ensure the json data is a string
        if (data['state_code'] && !(typeof data['state_code'] === 'string' || data['state_code'] instanceof String)) {
            throw new Error("Expected the field `state_code` to be a primitive type in the JSON string but got " + data['state_code']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          AvailablePropertiesInner1GeoLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['place_id'] && !(typeof data['place_id'] === 'string' || data['place_id'] instanceof String)) {
            throw new Error("Expected the field `place_id` to be a primitive type in the JSON string but got " + data['place_id']);
        }

        return true;
    }


}

AvailablePropertiesInner1Geo.RequiredProperties = ["language", "formatted_address", "location", "place_id"];

/**
 * The language of the localizable fields ot this geographical information set.<p>Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.</p><p>See also <a href=\"#isolanguage-codes\">in the appendix</a>.</p>
 * @member {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1Geo.LanguageEnum} language
 */
AvailablePropertiesInner1Geo.prototype['language'] = undefined;

/**
 * The formatted address in the local format of the properties location.
 * @member {String} formatted_address
 */
AvailablePropertiesInner1Geo.prototype['formatted_address'] = undefined;

/**
 * The name of the route or street.
 * @member {String} route
 */
AvailablePropertiesInner1Geo.prototype['route'] = undefined;

/**
 * The number of the street.
 * @member {String} street_number
 */
AvailablePropertiesInner1Geo.prototype['street_number'] = undefined;

/**
 * The postal code of the location.
 * @member {String} postal_code
 */
AvailablePropertiesInner1Geo.prototype['postal_code'] = undefined;

/**
 * A city or town.
 * @member {String} locality
 */
AvailablePropertiesInner1Geo.prototype['locality'] = undefined;

/**
 * A smaller area within a locality.
 * @member {String} sublocality
 */
AvailablePropertiesInner1Geo.prototype['sublocality'] = undefined;

/**
 * A smaller area within a locality at level 1.
 * @member {String} sublocality_level_1
 */
AvailablePropertiesInner1Geo.prototype['sublocality_level_1'] = undefined;

/**
 * A smaller area within a locality at level 2.
 * @member {String} sublocality_level_2
 */
AvailablePropertiesInner1Geo.prototype['sublocality_level_2'] = undefined;

/**
 * A smaller area within a locality at level 3.
 * @member {String} sublocality_level_3
 */
AvailablePropertiesInner1Geo.prototype['sublocality_level_3'] = undefined;

/**
 * A smaller area within a locality at level 4.
 * @member {String} sublocality_level_4
 */
AvailablePropertiesInner1Geo.prototype['sublocality_level_4'] = undefined;

/**
 * A smaller area within a locality at level 5.
 * @member {String} sublocality_level_5
 */
AvailablePropertiesInner1Geo.prototype['sublocality_level_5'] = undefined;

/**
 * A level 1 administrative area, such as a state or province.
 * @member {String} administrative_area_level_1
 */
AvailablePropertiesInner1Geo.prototype['administrative_area_level_1'] = undefined;

/**
 * A level 2 administrative area.
 * @member {String} administrative_area_level_2
 */
AvailablePropertiesInner1Geo.prototype['administrative_area_level_2'] = undefined;

/**
 * A level 3 administrative area
 * @member {String} administrative_area_level_3
 */
AvailablePropertiesInner1Geo.prototype['administrative_area_level_3'] = undefined;

/**
 * A level 4 administrative area.
 * @member {String} administrative_area_level_4
 */
AvailablePropertiesInner1Geo.prototype['administrative_area_level_4'] = undefined;

/**
 * A level 5 administrative area
 * @member {String} administrative_area_level_5
 */
AvailablePropertiesInner1Geo.prototype['administrative_area_level_5'] = undefined;

/**
 * The state or province code for the administrative area.
 * @member {String} state_code
 */
AvailablePropertiesInner1Geo.prototype['state_code'] = undefined;

/**
 * The country of this geographical information set.
 * @member {String} country
 */
AvailablePropertiesInner1Geo.prototype['country'] = undefined;

/**
 * The country code for the country.
 * @member {String} country_code
 */
AvailablePropertiesInner1Geo.prototype['country_code'] = undefined;

/**
 * @member {module:com.lodgea/com.lodgea.model/AvailablePropertiesInner1GeoLocation} location
 */
AvailablePropertiesInner1Geo.prototype['location'] = undefined;

/**
 * Uniquely identifies a place in our database.
 * @member {String} place_id
 */
AvailablePropertiesInner1Geo.prototype['place_id'] = undefined;





/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
AvailablePropertiesInner1Geo['LanguageEnum'] = {

    /**
     * value: "af"
     * @const
     */
    "af": "af",

    /**
     * value: "ar"
     * @const
     */
    "ar": "ar",

    /**
     * value: "bg"
     * @const
     */
    "bg": "bg",

    /**
     * value: "ca"
     * @const
     */
    "ca": "ca",

    /**
     * value: "cs"
     * @const
     */
    "cs": "cs",

    /**
     * value: "da"
     * @const
     */
    "da": "da",

    /**
     * value: "de"
     * @const
     */
    "de": "de",

    /**
     * value: "el"
     * @const
     */
    "el": "el",

    /**
     * value: "en"
     * @const
     */
    "en": "en",

    /**
     * value: "es"
     * @const
     */
    "es": "es",

    /**
     * value: "et"
     * @const
     */
    "et": "et",

    /**
     * value: "fi"
     * @const
     */
    "fi": "fi",

    /**
     * value: "fr"
     * @const
     */
    "fr": "fr",

    /**
     * value: "he"
     * @const
     */
    "he": "he",

    /**
     * value: "hi"
     * @const
     */
    "hi": "hi",

    /**
     * value: "hr"
     * @const
     */
    "hr": "hr",

    /**
     * value: "hu"
     * @const
     */
    "hu": "hu",

    /**
     * value: "id"
     * @const
     */
    "id": "id",

    /**
     * value: "is"
     * @const
     */
    "is": "is",

    /**
     * value: "it"
     * @const
     */
    "it": "it",

    /**
     * value: "ja"
     * @const
     */
    "ja": "ja",

    /**
     * value: "ko"
     * @const
     */
    "ko": "ko",

    /**
     * value: "lt"
     * @const
     */
    "lt": "lt",

    /**
     * value: "lv"
     * @const
     */
    "lv": "lv",

    /**
     * value: "nl"
     * @const
     */
    "nl": "nl",

    /**
     * value: "no"
     * @const
     */
    "no": "no",

    /**
     * value: "pl"
     * @const
     */
    "pl": "pl",

    /**
     * value: "pt"
     * @const
     */
    "pt": "pt",

    /**
     * value: "ro"
     * @const
     */
    "ro": "ro",

    /**
     * value: "ru"
     * @const
     */
    "ru": "ru",

    /**
     * value: "sk"
     * @const
     */
    "sk": "sk",

    /**
     * value: "sl"
     * @const
     */
    "sl": "sl",

    /**
     * value: "sr"
     * @const
     */
    "sr": "sr",

    /**
     * value: "sv"
     * @const
     */
    "sv": "sv",

    /**
     * value: "th"
     * @const
     */
    "th": "th",

    /**
     * value: "tr"
     * @const
     */
    "tr": "tr",

    /**
     * value: "vi"
     * @const
     */
    "vi": "vi",

    /**
     * value: "zh"
     * @const
     */
    "zh": "zh"
};



export default AvailablePropertiesInner1Geo;

