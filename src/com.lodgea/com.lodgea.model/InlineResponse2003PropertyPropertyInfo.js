/**
 * lodgea-js
 * LODGEA SDK for javascript. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse2001GeoLocation from './InlineResponse2001GeoLocation';
import InlineResponse2003PropertyPropertyInfoAcceptedPaymentList from './InlineResponse2003PropertyPropertyInfoAcceptedPaymentList';
import InlineResponse2003PropertyPropertyInfoMessageList from './InlineResponse2003PropertyPropertyInfoMessageList';

/**
 * The InlineResponse2003PropertyPropertyInfo model module.
 * @module com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo
 * @version 1.2.0
 */
class InlineResponse2003PropertyPropertyInfo {
    /**
     * Constructs a new <code>InlineResponse2003PropertyPropertyInfo</code>.
     * General information regarding the property.
     * @alias module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo
     * @param messageList {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfoMessageList>} Contains a descriptive message for this property in all supported languages.
     * @param categoryList {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo.CategoryListEnum>} A list of code of the property class types that apply to the property.
     * @param languageList {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo.LanguageListEnum>} The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.<p>See also <a href=\"#languagecountry-code\">in the appendix</a>.</p>
     * @param acceptedPaymentList {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfoAcceptedPaymentList>} A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.<p>See also <a href=\"#paymenttypes\">in the appendix</a>.</p>
     */
    constructor(messageList, categoryList, languageList, acceptedPaymentList) { 
        
        InlineResponse2003PropertyPropertyInfo.initialize(this, messageList, categoryList, languageList, acceptedPaymentList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageList, categoryList, languageList, acceptedPaymentList) { 
        obj['messageList'] = messageList;
        obj['categoryList'] = categoryList;
        obj['languageList'] = languageList;
        obj['acceptedPaymentList'] = acceptedPaymentList;
    }

    /**
     * Constructs a <code>InlineResponse2003PropertyPropertyInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo} obj Optional instance to populate.
     * @return {module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo} The populated <code>InlineResponse2003PropertyPropertyInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse2003PropertyPropertyInfo();

            if (data.hasOwnProperty('unitCount')) {
                obj['unitCount'] = ApiClient.convertToType(data['unitCount'], 'Number');
            }
            if (data.hasOwnProperty('messageList')) {
                obj['messageList'] = ApiClient.convertToType(data['messageList'], [InlineResponse2003PropertyPropertyInfoMessageList]);
            }
            if (data.hasOwnProperty('categoryList')) {
                obj['categoryList'] = ApiClient.convertToType(data['categoryList'], ['Number']);
            }
            if (data.hasOwnProperty('languageList')) {
                obj['languageList'] = ApiClient.convertToType(data['languageList'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = InlineResponse2001GeoLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('acceptedPaymentList')) {
                obj['acceptedPaymentList'] = ApiClient.convertToType(data['acceptedPaymentList'], [InlineResponse2003PropertyPropertyInfoAcceptedPaymentList]);
            }
        }
        return obj;
    }


}

/**
 * The amount of units the property has.
 * @member {Number} unitCount
 */
InlineResponse2003PropertyPropertyInfo.prototype['unitCount'] = undefined;

/**
 * Contains a descriptive message for this property in all supported languages.
 * @member {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfoMessageList>} messageList
 */
InlineResponse2003PropertyPropertyInfo.prototype['messageList'] = undefined;

/**
 * A list of code of the property class types that apply to the property.
 * @member {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo.CategoryListEnum>} categoryList
 */
InlineResponse2003PropertyPropertyInfo.prototype['categoryList'] = undefined;

/**
 * The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.<p>See also <a href=\"#languagecountry-code\">in the appendix</a>.</p>
 * @member {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfo.LanguageListEnum>} languageList
 */
InlineResponse2003PropertyPropertyInfo.prototype['languageList'] = undefined;

/**
 * @member {module:com.lodgea/com.lodgea.model/InlineResponse2001GeoLocation} location
 */
InlineResponse2003PropertyPropertyInfo.prototype['location'] = undefined;

/**
 * A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.<p>See also <a href=\"#paymenttypes\">in the appendix</a>.</p>
 * @member {Array.<module:com.lodgea/com.lodgea.model/InlineResponse2003PropertyPropertyInfoAcceptedPaymentList>} acceptedPaymentList
 */
InlineResponse2003PropertyPropertyInfo.prototype['acceptedPaymentList'] = undefined;





/**
 * Allowed values for the <code>categoryList</code> property.
 * @enum {Number}
 * @readonly
 */
InlineResponse2003PropertyPropertyInfo['CategoryListEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4,

    /**
     * value: 5
     * @const
     */
    "5": 5,

    /**
     * value: 6
     * @const
     */
    "6": 6,

    /**
     * value: 7
     * @const
     */
    "7": 7,

    /**
     * value: 8
     * @const
     */
    "8": 8,

    /**
     * value: 9
     * @const
     */
    "9": 9,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 11
     * @const
     */
    "11": 11,

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 13
     * @const
     */
    "13": 13,

    /**
     * value: 14
     * @const
     */
    "14": 14,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 16
     * @const
     */
    "16": 16,

    /**
     * value: 17
     * @const
     */
    "17": 17,

    /**
     * value: 18
     * @const
     */
    "18": 18,

    /**
     * value: 19
     * @const
     */
    "19": 19,

    /**
     * value: 20
     * @const
     */
    "20": 20,

    /**
     * value: 21
     * @const
     */
    "21": 21,

    /**
     * value: 22
     * @const
     */
    "22": 22,

    /**
     * value: 23
     * @const
     */
    "23": 23,

    /**
     * value: 24
     * @const
     */
    "24": 24,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 26
     * @const
     */
    "26": 26,

    /**
     * value: 27
     * @const
     */
    "27": 27,

    /**
     * value: 28
     * @const
     */
    "28": 28,

    /**
     * value: 29
     * @const
     */
    "29": 29,

    /**
     * value: 30
     * @const
     */
    "30": 30,

    /**
     * value: 31
     * @const
     */
    "31": 31,

    /**
     * value: 32
     * @const
     */
    "32": 32,

    /**
     * value: 33
     * @const
     */
    "33": 33,

    /**
     * value: 34
     * @const
     */
    "34": 34,

    /**
     * value: 35
     * @const
     */
    "35": 35,

    /**
     * value: 36
     * @const
     */
    "36": 36,

    /**
     * value: 37
     * @const
     */
    "37": 37,

    /**
     * value: 38
     * @const
     */
    "38": 38,

    /**
     * value: 39
     * @const
     */
    "39": 39,

    /**
     * value: 40
     * @const
     */
    "40": 40,

    /**
     * value: 41
     * @const
     */
    "41": 41,

    /**
     * value: 42
     * @const
     */
    "42": 42,

    /**
     * value: 43
     * @const
     */
    "43": 43,

    /**
     * value: 44
     * @const
     */
    "44": 44,

    /**
     * value: 45
     * @const
     */
    "45": 45,

    /**
     * value: 46
     * @const
     */
    "46": 46,

    /**
     * value: 47
     * @const
     */
    "47": 47,

    /**
     * value: 48
     * @const
     */
    "48": 48,

    /**
     * value: 49
     * @const
     */
    "49": 49,

    /**
     * value: 50
     * @const
     */
    "50": 50,

    /**
     * value: 51
     * @const
     */
    "51": 51,

    /**
     * value: 52
     * @const
     */
    "52": 52,

    /**
     * value: 53
     * @const
     */
    "53": 53,

    /**
     * value: 54
     * @const
     */
    "54": 54,

    /**
     * value: 55
     * @const
     */
    "55": 55,

    /**
     * value: 56
     * @const
     */
    "56": 56,

    /**
     * value: 57
     * @const
     */
    "57": 57,

    /**
     * value: 58
     * @const
     */
    "58": 58,

    /**
     * value: 59
     * @const
     */
    "59": 59,

    /**
     * value: 60
     * @const
     */
    "60": 60,

    /**
     * value: 61
     * @const
     */
    "61": 61,

    /**
     * value: 62
     * @const
     */
    "62": 62,

    /**
     * value: 5000
     * @const
     */
    "5000": 5000,

    /**
     * value: 5001
     * @const
     */
    "5001": 5001,

    /**
     * value: 5002
     * @const
     */
    "5002": 5002,

    /**
     * value: 5003
     * @const
     */
    "5003": 5003,

    /**
     * value: 5004
     * @const
     */
    "5004": 5004,

    /**
     * value: 5005
     * @const
     */
    "5005": 5005,

    /**
     * value: 5006
     * @const
     */
    "5006": 5006,

    /**
     * value: 5007
     * @const
     */
    "5007": 5007,

    /**
     * value: 5008
     * @const
     */
    "5008": 5008,

    /**
     * value: 5009
     * @const
     */
    "5009": 5009
};


/**
 * Allowed values for the <code>languageList</code> property.
 * @enum {String}
 * @readonly
 */
InlineResponse2003PropertyPropertyInfo['LanguageListEnum'] = {

    /**
     * value: "af"
     * @const
     */
    "af": "af",

    /**
     * value: "ar"
     * @const
     */
    "ar": "ar",

    /**
     * value: "az"
     * @const
     */
    "az": "az",

    /**
     * value: "be"
     * @const
     */
    "be": "be",

    /**
     * value: "bg"
     * @const
     */
    "bg": "bg",

    /**
     * value: "ca"
     * @const
     */
    "ca": "ca",

    /**
     * value: "cs"
     * @const
     */
    "cs": "cs",

    /**
     * value: "da"
     * @const
     */
    "da": "da",

    /**
     * value: "de"
     * @const
     */
    "de": "de",

    /**
     * value: "el"
     * @const
     */
    "el": "el",

    /**
     * value: "en"
     * @const
     */
    "en": "en",

    /**
     * value: "en-gb"
     * @const
     */
    "en-gb": "en-gb",

    /**
     * value: "en-us"
     * @const
     */
    "en-us": "en-us",

    /**
     * value: "es"
     * @const
     */
    "es": "es",

    /**
     * value: "es-ar"
     * @const
     */
    "es-ar": "es-ar",

    /**
     * value: "et"
     * @const
     */
    "et": "et",

    /**
     * value: "fr"
     * @const
     */
    "fr": "fr",

    /**
     * value: "fi"
     * @const
     */
    "fi": "fi",

    /**
     * value: "he"
     * @const
     */
    "he": "he",

    /**
     * value: "hi"
     * @const
     */
    "hi": "hi",

    /**
     * value: "hr"
     * @const
     */
    "hr": "hr",

    /**
     * value: "hu"
     * @const
     */
    "hu": "hu",

    /**
     * value: "id"
     * @const
     */
    "id": "id",

    /**
     * value: "is"
     * @const
     */
    "is": "is",

    /**
     * value: "it"
     * @const
     */
    "it": "it",

    /**
     * value: "ja"
     * @const
     */
    "ja": "ja",

    /**
     * value: "km"
     * @const
     */
    "km": "km",

    /**
     * value: "ko"
     * @const
     */
    "ko": "ko",

    /**
     * value: "lo"
     * @const
     */
    "lo": "lo",

    /**
     * value: "lt"
     * @const
     */
    "lt": "lt",

    /**
     * value: "lv"
     * @const
     */
    "lv": "lv",

    /**
     * value: "ms"
     * @const
     */
    "ms": "ms",

    /**
     * value: "nl"
     * @const
     */
    "nl": "nl",

    /**
     * value: "no"
     * @const
     */
    "no": "no",

    /**
     * value: "pl"
     * @const
     */
    "pl": "pl",

    /**
     * value: "pt"
     * @const
     */
    "pt": "pt",

    /**
     * value: "pt-br"
     * @const
     */
    "pt-br": "pt-br",

    /**
     * value: "pt-pt"
     * @const
     */
    "pt-pt": "pt-pt",

    /**
     * value: "ro"
     * @const
     */
    "ro": "ro",

    /**
     * value: "ru"
     * @const
     */
    "ru": "ru",

    /**
     * value: "sk"
     * @const
     */
    "sk": "sk",

    /**
     * value: "sl"
     * @const
     */
    "sl": "sl",

    /**
     * value: "sr"
     * @const
     */
    "sr": "sr",

    /**
     * value: "sv"
     * @const
     */
    "sv": "sv",

    /**
     * value: "tl"
     * @const
     */
    "tl": "tl",

    /**
     * value: "th"
     * @const
     */
    "th": "th",

    /**
     * value: "tr"
     * @const
     */
    "tr": "tr",

    /**
     * value: "uk"
     * @const
     */
    "uk": "uk",

    /**
     * value: "vi"
     * @const
     */
    "vi": "vi",

    /**
     * value: "xa"
     * @const
     */
    "xa": "xa",

    /**
     * value: "xb"
     * @const
     */
    "xb": "xb",

    /**
     * value: "xs"
     * @const
     */
    "xs": "xs",

    /**
     * value: "xt"
     * @const
     */
    "xt": "xt",

    /**
     * value: "xu"
     * @const
     */
    "xu": "xu",

    /**
     * value: "zh"
     * @const
     */
    "zh": "zh",

    /**
     * value: "zh-cn"
     * @const
     */
    "zh-cn": "zh-cn",

    /**
     * value: "zh-tw"
     * @const
     */
    "zh-tw": "zh-tw"
};



export default InlineResponse2003PropertyPropertyInfo;

